#!/usr/bin/env node

const cli = require('cli');

const cfnex = require('../cloudformation-extensions.js');
const path = require('path');
const { readJSON, writeFile, readConfig } = require('../lib/utils');

cli.setApp('CloudFormation Extensions (cfnex)', '0.0.1');

cli.enable('version', 'status');

cli.parse({
	inFilePath: [ 'i', 'Input cfnex JSON file', 'file' ],
	outFilePath: [ 'o', 'Write to FILE rather than the console', 'dir' ],
	cwd: [ false, 'Override the working directory (defaults to the input file\'s directory', 'dir' ]
});

cli.main(function(args, options) {
	let logger = this;

	let notNullOptions = 0;
	for (var i in options){
		if (options[i]){
			notNullOptions++;
		}
	}

	if (notNullOptions === 0){
		logger.error('Please pass some options in.');
		cli.getUsage();
		return;
	}

	let inFilePath = options.inFilePath;
	
	let cwd = options.cwd || path.resolve(inFilePath, '..');

	let outFilePath = options.outFilePath;
	
	logger.debug(`Reading in file: ${inFilePath}, to output to ${outFilePath || 'stdout'}`);

	let context = { cwd, logger };
	
	Promise.all([
			readJSON(inFilePath), 
			readConfig(context)
		])
		.then(function([fileContents, config]){
			context.config = config;
			return cfnex.parseCfnex(fileContents, context);
		})
		.then(function(cfn){
			let output = JSON.stringify(cfn, null, 2);
			if (outFilePath){
				return writeFile(outFilePath, output);
			} else {
				logger.output(output);
			}
		})
		.then(function(){
			if (outFilePath){
				logger.ok("Completed");
			}
		})
		.catch(function(err){
			logger.error(err);
			logger.debug(err.stack || '');
		});
});