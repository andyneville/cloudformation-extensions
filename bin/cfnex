#!/usr/bin/env node

const cli = require('cli')

const cfnex = require('../cloudformation-extensions')
const path = require('path')
const { readJSON, writeFile, readConfig } = require('../lib/utils')

cli.setApp('CloudFormation Extensions (cfnex)', '0.0.1')

cli.enable('version', 'status')

cli.parse({
	inFilePath: ['i', 'Input cfnex JSON file', 'file'],
	outFilePath: ['o', 'Write to FILE rather than the console', 'dir'],
	cwd: [false, 'Override the working directory (defaults to the input file\'s directory', 'dir'],
})

cli.main((args, options) => {
	const logger = cli

	const notNullOptions = Object.keys(options).filter(option => option).length

	if (notNullOptions === 0) {
		logger.error('Please pass some options in.')
		cli.getUsage()

		return
	}

	const inFilePath = options.inFilePath

	const cwd = options.cwd || path.resolve(inFilePath, '..')

	const outFilePath = options.outFilePath

	logger.debug(`Reading in file: ${inFilePath}, to output to ${outFilePath || 'stdout'}`)

	const context = { cwd, logger }

	Promise.all([
		readJSON(inFilePath),
		readConfig(context),
	])
	.then(([fileContents, config]) => {
		context.config = config

		return cfnex.parseCfnex(fileContents, context)
	})
	.then(cfn => {
		const output = JSON.stringify(cfn, null, 2)
		let ret
		if (!outFilePath) {
			logger.output(output)
		} else {
			ret = writeFile(outFilePath, output)
		}

		return ret
	})
	.then(() => {
		if (outFilePath) {
			logger.ok('Completed')
		}
	})
	.catch(err => {
		logger.error('Failed to process file.')
		logger.error(err)
		logger.debug(err.stack || '')
	})
})
